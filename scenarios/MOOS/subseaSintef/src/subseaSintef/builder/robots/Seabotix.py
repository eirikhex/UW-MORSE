from morse.builder import *
from subseaSintef.builder.actuators import FluidForces
from subseaSintef.builder.actuators import Thrustforces 

class Seabotix(Robot):
    """
    A template robot model for Seabotix, with a motion controller and a pose sensor.
    """
    def __init__(self, name = None, debug = True,Actuators = False, Sensors=False):

        # Seabotix.blend is located in the data/robots directory
        Robot.__init__(self, 'subseaSintef/robots/Seabotix.blend', name)
        self.properties(classpath = "subseaSintef.robots.Seabotix.Seabotix")

        ###################################
        # Physics Parameters
        ###################################
        self.set_rigid_body()
        self.set_collision_bounds()
        
        self.set_mass(15.3)
        #estimated
        self.Volume = 15.5/(1025.0)
        
        self.M_a = [[14.3173, 0, 0, 0, 0, 0],
                    [0, 22.3744, 0, 0, 0, 0],
                    [0, 0, 29.9081, 0, 0, 0],
                    [0, 0, 0, 0.4814, 0, 0],
                    [0, 0, 0, 0, 0.6471, 0],
                    [0, 0, 0, 0, 0, 0.5509]]
        
        self.M_a = [[12.68338526,      -1.406784743,     16.45938645,      -0.00318564,     -0.0608072966,    0.209957761],
                    [0.806421538,      23.6526745,       -1.81141649,      0.0542384719,    -0.0038236616,    1.088188257],
                    [-0.1600120366,    -3.12169039,      29.956199,        -0.007135068,    0.0006659248,     0.1486012528],
                    [0.001849541,      0.0542309052,     -0.0041692799,    0.5431413943,    -0.0382998681,    0.0249543885],
                    [-0.0607835771,    0.0067265324,     -0.0788862954,    0.0318318085,    0.6089980261,     -0.001006181],
                    [-0.152556859,     1.193918934,      -0.589276272,     0.0273632637,    0.0007305842,     0.4097704]]
        
        self.M_a = [[12.68338526,      -1.406784743,     16.45938645,      -0.00318564,     -0.0608072966,    0.209957761],
                    [0.806421538,      12.6526745,       -1.81141649,      0.0542384719,    -0.0038236616,    1.088188257],
                    [-0.1600120366,    -3.12169039,      9.956199,        -0.007135068,    0.0006659248,     0.1486012528],
                    [0.001849541,      0.0542309052,     -0.0041692799,    0.5431413943,    -0.0382998681,    0.0249543885],
                    [-0.0607835771,    0.0067265324,     -0.0788862954,    0.0318318085,    0.6089980261,     -0.001006181],
                    [-0.152556859,     1.193918934,      -0.589276272,     0.0273632637,    0.0007305842,     0.4097704]]

        
        self.M_rb = [[6.1, 0, 0, 0, 0, 0],
                    [0, 6.1, 0, 0, 0, 0],
                    [0, 0, 6.1, 0, 0, 0],
                    [0, 0, 0, 1.5, 0, 0],
                    [0, 0, 0, 0, 1.5, 0],
                    [0, 0, 0, 0, 0, 1.5]]
        
        self.M_rb = [[15.3, 0, 0, 0, 0, 0],
                    [0, 15.3, 0, 0, 0, 0],
                    [0, 0, 15.3, 0, 0, 0],
                    [0, 0, 0, 0.25068, 0.00166, -0.013944],
                    [0, 0, 0, 0.00166, 0.334424, -0.00214],
                    [0, 0, 0, -0.013944, -0.00214, 0.439024]]
        
        #Cfd-Damping
        self.D_l = [[ 0.1213, 0, 0, 0, 0, 0],
                    [0,  1.1732, 0, 0, 0, 0],
                    [0, 0,  -20.1130, 0, 0, 0],
                    [0, 0, 0,  -0.0282, 0, 0],
                    [0, 0, 0, 0, - 0.0034, 0],
                    [0, 0, 0, 0, 0, - 0.0033]]
        
        # Empirical Damping
        self.D_l = [[ 4.7364, 0, 0, 0, 0, 0],
                    [0,  8.9463, 0, 0, 0, 0],
                    [0, 0,  13.2936, 0, 0, 0],
                    [0, 0, 0,  0.0544 +2.0, 0, 0],
                    [0, 0, 0, 0,  0.0738 +2.0, 0],
                    [0, 0, 0, 0, 0,  0.0529 + 1.0]]
        
        #CFD-calculated Damping
        self.D_quad =[[ 23.9000, 0, 0, 0, 0, 0],
                      [0, 46.2700, 0, 0, 0, 0],
                      [0, 0, 87.2780, 0, 0, 0],
                      [0, 0, 0,  0.3664, 0, 0],
                      [0, 0, 0, 0,  0.4547, 0],
                      [0, 0, 0, 0, 0,  0.5489]]
        
        # Empirical Damping
        self.D_quad =[[29.6028, 0, 0, 0, 0, 0],
                      [0, 55.9146, 0, 0, 0, 0],
                      [0, 0, 83.0852, 0, 0, 0],
                      [0, 0, 0,  0.0773, 0, 0],
                      [0, 0, 0, 0,  0.4091, 0],
                      [0, 0, 0, 0, 0,  0.2931]]
        
        #self.D_quad =[[25.9914,      0.9755864,   7.686112,     0.128989,     0.259196,    0.1033956],
        #              [1.104994,     46.3894,     -6.452,       -0.748206,    0.040882,    -0.628866],
        #              [-0.701866,    1.099428,    49.3636,      0.071668,     -1.1578,     -0.01362],
        #              [-0.02208,     -0.1997156,  -0.007906,    0.18023,      0.02528,     0.069429],
        #              [-0.0467916,   0.1757068,   -0.583022,    0.0023243,    0.3655288,   -0.0002582978],
        #              [0.1744508,    -0.2623908,  0.14957,      -0.0224034,   -0.01476432, 0.62316]]
        
        #self.D_l    = [[ -2.2474,     -0.390316,     -2.16294,  0.3956,       -1.38574,    0.2669],
        #               [-0.185988,    1.3153,        2.048,     -0.037897,    0.041556,    -0.101567],
        #               [0.313133,     -0.725714,     1.5354,    0.042892,     0.0081,      0.00623],
        #               [-0.05612,     0.0534156,     0.096775,  -0.011115* -10.0,    0.00032,     -0.108566],
        #               [-0.0105584,   -0.10497326,   0.064965,  -0.0009932,   -0.0379828* -10.0,  0.000185177],
        #               [-0.0229128,   0.0557388,     -0.031045, 0.0039281,    -0.00846868, 0.009396*10]]
        
        
        self.COB = [0, 0, -0.165 ]#-0.085
        
        self.COG = [0, 0, -0.135 ]#+0.185
        
        
        
        

        ###################################
        # Actuators
        ###################################
        if Actuators:
            self.fluidForces = FluidForces()
            self.thrusters = Thrustforces()

            self.fluidForces.properties(V=self.Volume)

            self.append(self.thrusters)
            self.append(self.fluidForces)
            
            self.fluidForces.add_parameters(A=self.M_a,rb = self.M_rb, D_l = self.D_l, D_q=self.D_quad, r_g=self.COG, r_b=self.COB)
            
            #Make parameters available for the actuators
            #Thruster limits in "ENU" all but forward estimated
            self.thrusters.add_parameters(thrust_lim = [30.0, 60.0, 30.0,0,0,60.0*0.05])
            self.thrusters.add_parameters(simple = True)
            



        ###################################
        # Sensors
        ###################################
        if Sensors:
            
            # Camera Sensor
            camera = VideoCamera()
            camera.translate(y=0.2)
            camera.rotate(1.57,0.0,0.0)
            camera.properties(cam_width=854, cam_height=480, cam_focal=20, cam_far=200)
            self.camera = camera
            self.append(camera)

